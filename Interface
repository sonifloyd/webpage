interface
Can you identify the error in the below code?
interface A { private int i; } Ans- In interface variables are by default static ,final,public. not private

-What will be the output of the following program?
interface A { void myMethod(); }

class B { public void myMethod() { System.out.println("My Method"); } }

class C extends B implements A {

}

class MainClass { public static void main(String[] args) { A a = new C();

    a.myMethod();
}
} output- My Method

Can a class implement more than one interfaces?
Yes, a class can implement more than one interfaces. #Why the below code is showing compile time error? interface X { void methodX(); }

class Y implements X { void methodX()// here method should must be public { System.out.println("Method X"); } } Answer : Interface methods must be implemented as public. Because, interface methods are public by default and you should not reduce the visibility of any methods while overriding.

Does below code compile successfully? If not, why?
interface A { int i = 111; }

class B implements A { void methodB() { i = 222; } } Answer : No, because interface fields are static and final by default and you can’t change their value once they are initialized. In the above code, methodB() is changing value of interface field A.i. It shows compile time error. #Is the following code written correctly? class A { //Class A }

interface B extends A { //Interface B extending Class A } Answer : No. An interface can extend another interface not the class.

What will be the output of the following program?
interface P { String p = "PPPP";

String methodP();
}

interface Q extends P { String q = "QQQQ";

String methodQ();
}

class R implements P, Q { public String methodP() { return q+p; }

public String methodQ()
{
    return p+q;
}
}

public class MainClass { public static void main(String[] args) { R r = new R();

    System.out.println(r.methodP());
     
    System.out.println(r.methodQ());
}
} Answer : QQQQPPPP PPPPQQQQ

Can interfaces have constructors?
No. Interfaces can’t have constructors.

Is the below program written correctly? If yes, what will be the output?
class A implements B {
public int methodB(int i) { return i =+ i * i; } }

interface B { int methodB(int i); }

public class MainClass { public static void main(String[] args) { B b = new A();

    System.out.println(b.methodB(2));
}
} Answer : Yes, program is written correctly. Output will be, 4(doubt my ans is 6)

Can you find out the errors in the following code?(doubt)
interface A { { System.out.println("Interface A"); }

static
{
    System.out.println("Interface A");
}
} Answer : Interfaces can’t have initializers. #Like classes in java, Interfaces also extend java.lang.Object class by default. True OR False? False. Interfaces don’t extend Object class.

Does below program compile successfully?
interface ABC { public void methodOne();

public void methodTwo();
}

interface PQR extends ABC { public void methodOne();

public void methodTwo();
} Yes, program compiles successfully.

Can interfaces have static methods?
Yes, from Java 8, interfaces can have static method

Is the following program written correctly? If yes, what will be the output?
interface ABC { void methodOne(); }

interface PQR extends ABC {
void methodTwo(); }

abstract class XYZ implements PQR { public void methodOne() { methodTwo(); } }

class MNO extends XYZ { public void methodTwo() { methodOne(); } }

public class MainClass { public static void main(String[] args) { ABC abc = new MNO();

    abc.methodOne();
}
} Answer : Yes, program is written is correctly. But, it will throw StackOverflowError at run time. Because, methodOne() and methodTwo() are cyclicly called.

What will be the output of the following program?(doubt)
interface X { char c = 'A';

char methodX();
}

class Y implements X { { System.out.println(c); }

public char methodX()
{
    char c = this.c;
     
    return ++c;
}
}

public class MainClass { public static void main(String[] args) { Y y = new Y();

    System.out.println(y.methodX());
     
    System.out.println(y.c);
     
    System.out.println(X.c);
}
} Answer : A B A A #Can you identify the error in the below code? interface A { void methodA(); }

class B implements A { public void methodA() { interface C { int i = 123; } } } Answer : Interfaces can’t be local members of a method. #Can we declare an interface as ‘abstract’? Yes, interfaces can be declared as ‘abstract’. But, there is no need to declare like that because interfaces are ‘abstract’ by default. #What will be the output of the following program?(doubt) interface One { String s = "FINAL";

String methodONE();
}

interface Two { String methodONE(); }

abstract class Three { String s = "NOT FINAL";

public abstract String methodONE();
}

class Four extends Three implements One, Two { public String methodONE() { String s = super.s + One.s;// how can we write one.s

    return s;
}
}

public class MainClass { public static void main(String[] args) { Four four = new Four();

    System.out.println(four.methodONE());
     
    One one = four;//here is doubt
     
    System.out.println(one.s);
}
}

Answer : NOT FINALFINAL FINAL #What will be the output of the below program? interface X { void method(); }

class Y { public void method() { System.out.println("CLASS Y"); } }

class Z extends Y implements X {

}

public class MainClass { public static void main(String[] args) { X x = new Z();

    x.method();
}
} Answer : CLASS Y #Can interfaces have methods other than abstract? Yes, from Java 8, interfaces can have static methods and default methods other than abstract methods. #What will be the output of the following program? interface A { int methodA(); }

interface B { int methodB(); }

interface C { int methodC(); }

class D implements A, B, C { int i = 999+111;

public int methodA()
{
    i =+ i / i;
     
    return i;
}
 
public int methodB()
{
    i =- i * i;
     
    return i;
}
 
public int methodC()
{
    i = ++i - --i;
     
    return i;
}
}

public class MainClass { public static void main(String[] args) { D d = new D();

    System.out.println(d.i);
     
    System.out.println(d.methodA());
     
    System.out.println(d.methodB());
     
    System.out.println(d.methodC());
}
} Answer : 1110 1 -1 1

How do you print the value of field ‘i’ of interface ‘OneTwoThree’ in the below example and what will be the it’s value?
interface One { int i = 222;

interface OneTwo
{
    int i = One.i+One.i;
     
    interface OneTwoThree
    {
        int i = OneTwo.i + OneTwo.i;
    }
}
} Printing ‘i’ value —> System.out.println(One.OneTwo.OneTwoThree.i) Value of One.OneTwo.OneTwoThree.i will be 888. #Can you identify the errors in the below code? interface I { class C implements I { public void methodI(int i) { System.out.println(i); } }

void methodI(int i);
} ans- N0 error #What will be the output of the following program? class A { }

class B extends A { }

class C extends B { }

interface ABC { void method(A a); }

interface PQR { void method(B b); }

class M implements ABC, PQR {
public void method(A a) { System.out.println(2); }

public void method(B b) 
{
    System.out.println(3);
}
}

public class MainClass { public static void main(String[] args) { M m = new M();

    m.method(new A());
     
    m.method(new B());
     
    m.method(new C());
}
} Answer : 2 3 3 #Is the below program written correctly? If yes, what will be the output?(doubt) interface I { class C { int i;

    public C(int i)
    {
        this.i = ++i;
    }
     
    int methodC()
    {
        return ++i;
    }
}
}

public class MainClass { public static void main(String[] args) { I.C c = new I.C(000);

    System.out.println(c.methodC());
}
} Yes, program is written correctly. Output will be, 2 #What will be the output of the following program? abstract class A { abstract void myMethod(Number N); }

interface B { abstract void myMethod(Object O); }

class C extends A implements B { void myMethod(Number N) { System.out.println("Number"); }

public void myMethod(Object O)
{
    System.out.println("Object");
}
}

public class MainClass { public static void main(String[] args) { A a = new C();

    a.myMethod(new Integer(121));
     
    B b = new C();
     
    b.myMethod(new Integer(121));
     
    C c = new C();
     
    c.myMethod(new Integer(121));
}
} Answer : Number Object Number #Can we define interfaces as generic? Yes, we can define generic interfaces. #Can you identify the error in the below code? interface X { void methodX(); }

interface Y extends X { void methodY(); }

class Z implements Y// here is erroe { public void methodY() { System.out.println("Method Y"); } } ans-Class Z must implement methodX() also. #Can you identify the error in the below code? class A implements A.B { static interface B { void methodB(); } } ans-Cycle detected. Any class can not extend itself or it’s member types. #Is the below program written correctly? If yes, what will be the output?(doubt) interface X { void methodX();

interface Y
{
    void methodY();
}
}

class Z implements X, X.Y { { methodX();

    System.out.println(1);
}
 
public void methodX()
{
    methodY();
     
    System.out.println(2);
}
 
public void methodY()
{
    System.out.println(3);
}
}

public class MainClass { public static void main(String[] args) { Z z = new Z();

    z.methodX();
     
    z.methodY();
     
    X x = z;
     
    x.methodX();
}
} Answer : Yes, program is correct. Output will be, 3 2 1 3 2 3 3 2 #What will be the output of the following program? interface A { String A = "AAA";

String methodA();
}

interface B { String B = "BBB";

String methodB();
}

class C implements A, B { public String methodA() { return A+B; }

public String methodB()
{
    return B+A;
}
}

class D extends C implements A, B { String D = "DDD";

public String methodA()
{
    return D+methodB();
}
}

public class MainClass { public static void main(String[] args) { C c = new C();

    System.out.println(c.methodA());
     
    System.out.println(c.methodB());
     
    c = new D();
     
    System.out.println(c.methodA());
     
    System.out.println(c.methodB());
}
} Answer : AAABBB BBBAAA DDDBBBAAA BBBAAA

Can we write constructor inside interface in java?
No. Interfaces does not allow constructors. Why interface does not have constructor? The variables inside interfaces are static final variables means constants and we can not create object fro interface so there is no need of constructor in interface that is the reason interface doesn't allow us to create constructor.

What will happens if we try to create constructor inside interfaces in java
If we try to create constructor in interface compile time error will come. Error description: Interfaces cannot have constructors.

